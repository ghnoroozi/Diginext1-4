برای حل این مسئله، می‌توانیم از الگوریتم جستجوی دودویی استفاده کنیم. از آنجا که ماتریس به شکلی مرتب شده است که هر ردیف به ترتیب صعودی است و اولین عنصر هر ردیف بزرگتر از آخرین عنصر ردیف قبلی است، می‌توان این ماتریس را به عنوان یک آرایه یک‌بعدی فرض کرد و جستجوی دودویی را بر روی این آرایه اعمال کرد.

فرض کنید ماتریس ما به شکل زیر است:
[
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
این ماتریس را می‌توان به شکل یک آرایه یک‌بعدی به صورت زیر در نظر گرفت:
[1, 3, 5, 7, 10, 11, 16, 20, 23, 30, 34, 50]
می‌توانیم از جستجوی دودویی برای جستجوی مقدار هدف در این آرایه استفاده کنیم. برای دسترسی به عناصر ماتریس از طریق این آرایه فرضی، از رابطه‌های زیر استفاده می‌کنیم:

اندیس ردیف: row = index // n
اندیس ستون: col = index % n
که n تعداد ستون‌های ماتریس است.

در ادامه کد پایتون برای این الگوریتم ارائه شده است:
def search_matrix(matrix, target):
    if not matrix or not matrix[0]:
        return False

    m, n = len(matrix), len(matrix[0])
    left, right = 0, m * n - 1

    while left <= right:
        mid = (left + right) // 2
        mid_value = matrix[mid // n][mid % n]

        if mid_value == target:
            return True
        elif mid_value < target:
            left = mid + 1
        else:
            right = mid - 1

    return False

# مثال استفاده:
matrix = [
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
print(search_matrix(matrix, target))  # خروجی: True


این کد ابتدا ابعاد ماتریس را بررسی می‌کند. سپس با استفاده از جستجوی دودویی، مقدار هدف را جستجو می‌کند و در نهایت نتیجه را برمی‌گرداند.







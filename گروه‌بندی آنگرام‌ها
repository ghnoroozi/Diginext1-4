برای حل این مسئله، می‌توانیم از یک ساختار داده‌ای مانند دیکشنری استفاده کنیم تا رشته‌هایی که آنگرام یکدیگر هستند را گروه‌بندی کنیم. یک روش ساده برای شناسایی آنگرام‌ها، مرتب‌سازی کاراکترهای هر رشته است. رشته‌های مرتب‌شده یکسان نشان‌دهنده آنگرام‌های یکدیگر هستند.

در ادامه، کد پایتون برای گروه‌بندی آنگرام‌ها ارائه شده است:
def group_anagrams(strs):
    anagrams = {}

    for s in strs:
        # رشته را مرتب می‌کنیم تا یک کلید مشترک برای آنگرام‌ها داشته باشیم
        sorted_str = ''.join(sorted(s))
        
        # اگر این کلید قبلا در دیکشنری وجود نداشته باشد، یک لیست جدید برای آن ایجاد می‌کنیم
        if sorted_str not in anagrams:
            anagrams[sorted_str] = []
        
        # رشته اصلی را به لیست مربوط به کلید اضافه می‌کنیم
        anagrams[sorted_str].append(s)
    
    # تبدیل مقادیر دیکشنری به لیستی از لیست‌ها
    return list(anagrams.values())

# مثال استفاده:
strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
print(group_anagrams(strs))

خروجی این کد به شکل زیر خواهد بود:
[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]

در این کد:

یک دیکشنری به نام anagrams ایجاد می‌کنیم که کلید آن رشته‌های مرتب‌شده و مقدار آن لیستی از رشته‌های اصلی است.
برای هر رشته در ورودی، رشته را مرتب می‌کنیم و از آن به عنوان کلید استفاده می‌کنیم.
اگر این کلید قبلاً در دیکشنری وجود نداشته باشد، یک لیست جدید ایجاد می‌کنیم و رشته اصلی را به آن اضافه می‌کنیم.
در نهایت، مقادیر دیکشنری را که لیست‌های آنگرام‌ها هستند، به عنوان خروجی برمی‌گردانیم.
این روش کارا و ساده است و به خوبی آنگرام‌ها را گروه‌بندی می‌کند.
